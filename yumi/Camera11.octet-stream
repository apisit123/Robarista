MODULE Camera
    !Change the job name
    CONST string myjob:="CPF.job";
    VAR cameratarget mycameratarget;

    !Declare robtarget, workobject, tooldata and, in case the camera is
    !mounted on a moving part of the robot, the imaging position.
    CONST robtarget myrobtarget:=[[-0.51,0.97,5.87],[0.00184124,0.0114573,-0.997377,0.0714499],[-1,2,0,1010],[-164.252,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget myimagepos:=[[277.70,13.47,279.56],[0.000600102,0.032228,-0.99948,-0.000323069],[-1,3,1,1010],[167.643,9E+09,9E+09,9E+09,9E+09,9E+09]];
    TASK PERS wobjdata mywobj:=[FALSE,TRUE,"",[[304.518,4.67573,37.5464],[0.721516,0.0110352,-0.0211847,-0.691986]],[[5.09681,8.15747,0],[1,0,0,0]]];
    CONST robtarget myimagepos10:=[[-0.15,2.25,38.89],[0.00216027,0.0112212,-0.997374,0.0715216],[-1,2,0,1010],[-164.224,9E+09,9E+09,9E+09,9E+09,9E+09]];
    !PERS tooldata mytool:=[TRUE,[[0,0,1],[1,0,0,0]],[1,[0,0,0],[1,0,0,0],0,0,0]];
    PROC rCameraInit()
        CamSetProgramMode LeftHand_Cam;
        CamLoadJob LeftHand_Cam,myjob;
        WaitTime 0.5;
        CamSetRunMode LeftHand_Cam;

    ENDPROC

    PROC MoveToDetectedObject()
        !Change the camera name

        !If the camera is mounted on the robot, store this position during setup
        !so that the robot may always return to this position before requesting an image.
        MoveJ myimagepos,v100,fine,VisionL;
        WaitTime 0.5;

        CamReqImage LeftHand_Cam;
        CamGetResult LeftHand_Cam,mycameratarget\MaxTime:=2;
        mywobj.oframe:=mycameratarget.cframe;

        !During the first cycle, run the program until this point,
        !then jog the tool to the desired grip position and modpos myrobtarget.
        MoveJ myimagepos10,v100,fine,Vacuum1L\WObj:=mywobj;
        MoveL myrobtarget,v100,fine,Vacuum1L\WObj:=mywobj;
        g_VacuumOn1;
        WaitTime 0.5;
        MoveL myimagepos10,v100,fine,Vacuum1L\WObj:=mywobj;

    ERROR

        IF ERRNO=ERR_CAM_MAXTIME THEN
             CamReqImage LeftHand_Cam;
             RETRY;
        ENDIF


    ENDPROC

ENDMODULE